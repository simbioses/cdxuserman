[
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": "The diagram below shows a component \u0026amp; connector view of the implemented architecture. OSCAR instances are connected to the CDX infrastructure via the Oscar Bidirectional Interoperability Bus (OBIB).\nThe functionality required to interact with the OBIB is encapsulated in the OBIB Connector component which is made available as a Java archive (JAR). The OBIB connection is configured by means of two artifacts on the OSCAR server: an obibconnector properties file and an obibconnector keystore file (see deployment).\n  Architecture   The OBIB Connector interfaces with the OBIB using a secured REST API that is provided by the interface engine MirthConnect. Several CDX Channels are deployed on MirthConnect to generate and receive CDX documents.\nMirthConnect interfaces with the CDX infrastructure via secured SOAP interfaces. That connection is implemented in the CDX Connector component.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/018_administration/cdx_03/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "The CDX systems needs to be connected to the OBIB (Oscar Bidirectional Interoperability Bus) exchange data. Users with role \u0026ldquo;admin\u0026rdquo; can check this in the CDX user interface in OSCAR\u0026rsquo;s Admin panel.\n Admin → Integration → Clinical Data eXchange (CDX)\n The CDX Status tab indicates whether OSCAR is connected with an OBIB.\nIf the CDX Status tab indicates The OBIB is not connected, please contact your OSCAR Service Provider.\n  CDX Configuration   Administrators can configure the OBIB connection:\n OBIB URL specifies the URL of the Oscar Bidirectional Interoperability Bus (OBIB) Clinic OID specifies the ID assigned to the clinic by CDX. This is a read only value sourced from the obibconnector.properties file installed when OSCAR is configured for CDX. Automatic Import Enabled/Disabled specifies whether OSCAR will automatically download new documents. Polling Interval specifies the time interval between automatic downloads (in minutes) Save button makes the settings persistent  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/003_introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Introduction The HL7 Clinical Document Architecture (CDA) is a standard to communicate clinical documents electronically between provider systems.\nThe Provincial Health Services Authority (PHSA) has partnered with other health authorities to establish CDA-based interoperability between clinical information systems, including primary care EMRs. This initiative uses the Clinical Document eXchange (CDX) communication system (https://bccdx.ca). The PHSA has worked with EMR vendors to implement CDX-based interoperability.\nOSCAR BC has created a first version of OSCAR EMR that is CDX interoperable. This first version is capable of\n receiving and displaying any of the approved types of CDX documents, e.g., eReferrals, Progress Notes, Patient Summaries, Discharge Summaries, General Purpose Notifications, Lab Results, etc. sending eReferral requests to specialists connected to the CDX system.  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/030_installation/obib_install/",
	"title": "OBIB Installation",
	"tags": [],
	"description": "",
	"content": " OSCAR EMR instances connect to the CDX message distribution system via the Oscar Bidirectional Interoperability Bus (OBIB). An OBIB can support many OSCAR instances. Therefore, an OSP only needs to operate one OBIB.\nclassDiagram OSCAR1 --\u0026gt; OBIB OSCAR2 --\u0026gt; OBIB OSCAR3 --\u0026gt; OBIB OSCAR4 --\u0026gt; OBIB OSCARn --\u0026gt; OBIB OBIB --\u0026gt; CDX CDX \u0026lt;--\u0026gt; otherHIS1 CDX \u0026lt;--\u0026gt; otherHIS2 CDX \u0026lt;--\u0026gt; otherHIS3 CDX \u0026lt;--\u0026gt; otherHIS4 CDX \u0026lt;--\u0026gt; otherHIS5  The server side of OBIB is implemented based on the interoperability engine Mirth Connect. Mirth Connect channels transform messages received from the OSCAR to CDA messages and send those messages to CDX through Web Services.\nThe OBIB depends on a series of software platforms, namely Mirth Connect, Java, MySQL/MariaDB, OpenSSL and NGINX. Thus, to simplify the OBIB installation, a production-ready Vagrant VM was created along with administrative scripts to manage the clinics within OBIB.\nInstalling the VM for OBIB The following steps create a Vagrant VM with OBIB ready for production.\nUncompress the obib-\u0026lt;version-number\u0026gt;.zip file and enter in the extracted folder obib-\u0026lt;version-number\u0026gt;/.\nThe deployment file can be generated with mvn deploy, which will generate obib-\u0026lt;version-number\u0026gt;.zip in the /OBIB/target/ sub-directory. For development it is recommended to start the Vagrant VM directly from the source folder, e.g., \u0026lt;dev-workspace\u0026gt;/OBIB/mirthchannels/OBIB_vm. Thus, any change to the scripts will be immediately available for the VM.\n Change the configurations in Vagrantfile and mirth_connect.sh as needed. Most settings are within mirth_connect.sh only, except for the VM IP address which is located in both files.\n# VM IP address in Vagrantfile: config.vm.network \u0026quot;private_network\u0026quot;, ip: \u0026quot;192.168.100.101\u0026quot; # Mirth Connect (VM) IP address in mirth_connect.sh: SERVER_IP='192.168.100.101'  OBIB uses a digital certificate as to sign the server and clients certificates, which are used for SSL authentication. It is recommended to generate a new self-signed digital certificate for production, or use a certificate provided by a Certificate Authority (CA). To generate a new self-signed certificate for OBIB use the script gen_obib_certs.sh. If a CA-signed certificate is used, both private and public key must be copied to the subdirectory /configs/ssl.\n Start the new Vagrant VM with the environment installed and configured execute the following command:\n$ vagrant up  Then, restart the VM to ensure all services are starting at boot time:\n$ vagrant reload  Deploy the OBIB Channels (automatically) To deploy a new OBIB or redeploy an update of OBIB, execute the deploy provision from the folder where Vagrant VM is installed in, using the following command:\n$ vagrant provision --provision-with deploy  *All operations should display Response code: 2XX in the console. In case of error, all deployment operation returns are stored in the folder /home/vagrant/output in the VM.\nIf the installations is successful, Mirth Connect and OBIB is available from the same IP configured previously. For example, the OBIB Connector address will be available at https://192.168.100.101 and Mirth Connector Administration at https://192.168.100.101:8443 if the VM IP address is 192.168.100.101.\nThe same command is used for updating the Mirth channels.\n Deploy the OBIB Channels (manually) This deployment option is executed using the Mirth Connect Administrator, available at https://www.nextgen.com/products-and-services/NextGen-Connect-Integration-Engine-Downloads. Also, the Mirth Connect Administrator is required for the development and maintenance of OBIB Channels, since the xmls generated by Mirth Connect are complex to maintain with a text editor.\nLogin into the Mirth Connect Administrator\nThe address and credentials to access Mirth Connect using the Administrator are defined in the mirth_connect.sh file, used during the Vagrant VM installation.\nThe two necessary files to deploy OBIB are: the OBIB_global_scripts.xml, which contains the Vagrant Global Scripts and OBIB_channel_group.xml, which contains the OBIB Channels and Template Codes.\nTo import the Vagrant Global Scripts do:\n Click on Channels in Mirth Connect menus. Click on Edit Global Scripts in Channel Tasks menus. Click on Import Scripts in Script Tasks menus. Select the OBIB_global_scripts.xml file from /mirthchannels/OBIB_vm/configs/obib/ folder. Click on Save Scripts in Script Tasks menus.  To import the OBIB Channes and Template Codes do:\n Click on Channels in Mirth Connect menus. Click on Import Group in Group Tasks menu. Select the OBIB_channel_group.xml file from /mirthchannels/OBIB_vm/configs/obib/ folder. Answer Yes to import the Code Template Libraries at same time.  After the previous steps, OBIB is ready to deploy within Mirht Connect. This is done by selecting the OBIB group on main screen and clickin on Redeploy all in the Channel Tasks menus.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/015_sending/cdx_19/",
	"title": "Recipient Registry",
	"tags": [],
	"description": "",
	"content": " The CDX infrastructure has a provider registry, which contains address information about all CDX-capable providers and clinics.\nOSCAR has traditionally kept its own database of specialists. The CDX extension of OSCAR allows users to query the CDX provider registry and add/edit CDX capable providers in OSCAR\u0026rsquo;s database.\nAdding new CDX-capable specialists The “Add Specialist” UI has been extended to add CDX-capable specialists (click the Add CDX-Enabled Specialist link at the top).\n  Extended UI for adding specialists   The new dialogue allows the user to search the CDX provider registry for providers to add to OSCAR. The search is based on any letters and returns all providers with these letters in their names.\n  CDX Provider Registry Search   The search should return a list of specialists that meet the search criteria. They can be added using the add button.\n  Registry search results   ⚠️ At this point, Interior Health Authority\u0026rsquo;s provider registry does not provide the speciality of specialist providers. Therefore, the speciality needs to be added manually in the usual way:\n Show All Services → Select a service, e.g., Cardiology → Select the specialists that provide this service → Click Update\n Updating existing specialists Clinics will likely have existing specialists in their EMR database. OSCAR allows users to update these records where existing specialists are found to be CDX capable. This can be done automatically or manually. The Edit Specialists UI has a new Test CDX Availability function that (if invoked) will test the CDX availability of all specialists stored at the clinic (and update the local database accordingly).\n  Updating existing specialists (automatic, batch)   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_06/",
	"title": "Routing to the Inbox",
	"tags": [],
	"description": "",
	"content": "CDX documents may identify several primary and secondary recipients (roughly analogous to the “To:” and “Cc:” fields in email.) CDX documents may also not specify any recipient provider - but just a recipient clinic.\nOSCAR’s CDX import engine uses the following logic to route incoming CDX documents to provider inboxes:\n (Step 1) route the document to the Inbox of any provider with the same MSP number as any of the recipients named in the document. (Step 2) if Step 1 did not result in any provider matches and if the patient named in the document could be matched to a demographic record in the EMR then route the document to the most responsible provider (MRP) of the matched patient (if available). (Step 3) if Steps 1 and 2 did not result in any provider matches, the document is considered “unclaimed\u0026rdquo; and can be retrieved by searching for “unclaimed” documents in the Inbox.  As usual for OSCAR, unclaimed inbox items are indicated with an asterisk and can be viewed by clicking on the asterisk.\n  Inbox indicator     Inbox shows document that was **not** linked to provider or patient   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/021_cdxcomposer/cdx_24_sending/",
	"title": "Sending",
	"tags": [],
	"description": "",
	"content": " CDX Composer can be used to send different CDX documents like information request, progress note and patient summary from a single interface.\n  CDX Composer UI   Patient Patients can be directly searched by their first and last name and added to the document.\nPrimary Recipient(s) and Secondary Recipient(s) The CDX infrastructure has a provider registry, which contains address information about all CDX-capable providers and clinics.\nEven though, OSCAR has traditionally kept its own database of specialists. The CDX Composer allows users to query the CDX provider registry and add CDX capable providers directly into the document without using the OSCAR database. By clicking \u0026ldquo;Add\u0026rdquo;, Primary Recipient(s) and Secondary Recipient(s) can be directly searched by Name from the CDX provider registry and added to the document. User can also remove the selected Primary Recipient(s) and Secondary Recipient(s) from the document by click the \u0026ldquo;x\u0026rdquo; button before the names.   Modal for adding recipients   Some providers may work for more than one clinic. In this case, the user can select the specific clinics to direct the CDX document to.\n Message Type Message type will be \u0026ldquo;In response to {document type}\u0026rdquo; if user is replying to an incoming document, \u0026ldquo;New\u0026rdquo; otherwise.\nDocument Type CDX Composer allows sending information request, patient summary and progress note. A user can select the type of document from the drop down.\nContent CDX Composer allows sending free text with the document and provides a text area for that.\nOther important info Other important info like family history, medical history, risk factors and allergies can also be sent through CDX messenger as a content.\nAttachments Attachments including CDX documents and labs can be added to the document. Attachments and content can be sent together.\n Save Draft User at any time before sending the document can save the details of the documents as draft, which can be edited and sent later, as explained in the next section.\n  Draft saved   Send Once the data for the Cdx document has been entered completely, the document can be sent using the Send button at the bottom.\nAfter Send Sending the CDX document may take a few seconds. If the document was successfully sent to the CDX delivery system, the user will see a success window, which will close automatically after 10 seconds (see below).\n  Success message   Successfully sending a document to the CDX system does not imply instant delivery at the target clinic(s). The CDX messaging system will securely hold the sent document until it is downloaded by the recipient EMR system(s). Different EMRs may check the CDX system at different times for new documents to download. OSCAR users may check the delivery status of sent documents, as explained in the next section.\n If there was an error sending the document using the CDX system, users will see a window with the error message (see below). The error message may help users or their OSPs to resolve the problem and try again.\n  Sample error message   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/datamodel/",
	"title": "Data Model",
	"tags": [],
	"description": "",
	"content": " A decision was made to utilize the existing OSCAR workflows and UI elements as much as possible for CDX interoperability, so that users do not have to switch between different \u0026lsquo;tools\u0026rsquo; to handle documents from different sources (e.g., CDX, Excelleris, etc.).\nOSCAR has traditionally persisted documents as files in the file system and meta information about the documents in the database document table.\nIn order to minimize the changes to OSCAR, the CDX extension also uses the document table for storing meta-information about received documents. However, the actual CDX documents are persisted in the database and not in the file system. This is done in the new cdx_provenance and cdx_attachment table (see data model below). The cdx_provenance.payload attribute stores the entire XML of the received CDA document and each such document may have multiple attachments stored in the cdx_attachment table. In addition to storing received documents, the cdx_provenance table stores sent documents, as well.\nTable cdx_pending_docs is used to record information about documents that either OSCAR attempted to download unsuccessfully, or that were manually deleted by an OSCAR user.\n  Database model   The CDX provider registry allows providers to work for multiple clinics. Therefore, there is a many-to-many relationship between providers (stored in the preexisting professionalSpecialists table and the clinics they work for, which are stored in the new cdx_clinics table. That relationship is represented in the new intersection table cdx_ClinicAndProfessionalIds.\nElements Catalogue document Pre-existing in OSCAR. Store meta information about uploaded documents. Now also used to store meta-data for received CDX documents.\npatientLabRouting Pre-existing in OSCAR. Used to associated received documents (and labs) with patients. Note: the lab_no foreign key conditionally points to either a record on table document or a record in table HL7TextInfo, depending on the value of attribute doc_type.\nproviderLabRouting Pre-existing in OSCAR. Used to associated received documents (and labs) with providers. Note: the lab_no foreign key conditionally points to either a record on table document or a record in table HL7TextInfo, depending on the value of attribute doc_type.\ndemographic Pre-existing in OSCAR. Used to maintain data on patient demographics.\nprovider Pre-existing in OSCAR. Used to maintain data on providers.\nctl_document Pre-existing in OSCAR. Not well document. Appears to maintain information on document status. module_id is conditional foreign key to demographic table, if module has value \u0026lsquo;demographic\u0026rsquo; and module_id is not \u0026lsquo;-1\u0026rsquo;.\nHL7TextInfo Pre-existing in OSCAR. Used to maintain information on HL7 labs. (currently not used for CDX documents)\ncdx_provenance Newly added. Used to store information for received or sent CDX documents.\n   Attribute Description     id serial id (PK)   doc_id CDA document ID   version CDA document version   effective_time time document was created   parent_doc parent of CDA document (if applicable). Foreign key to doc_id   set_id id of document set (if applicable)   in_fulfillment_of_id set if document is sent in fulfillment of another document or workflow (such as an order). Referral updates use this field to refer to the referral order document. Referral order documents use this field to refer to the internal referral ID.   kind stores kind of document (LOINC display name)   action either \u0026lsquo;import\u0026rsquo; for imported documents or \u0026lsquo;SEND\u0026rsquo; for sent documents   payload XML content of the CDA document   document_no foreign key to \u0026lsquo;document\u0026rsquo; table (for imported documents)   msg_id CDX message ID   warnings warnings generated by the import engine about inconsistencies between EMR data and document data   status status of document (e.g., \u0026lsquo;completed\u0026rsquo;, \u0026lsquo;corrected\u0026rsquo;, etc.)   distribution_status this field is only populated for sent documents. It contains the distribution status (e.g., queued, delivered, etc)    cdx_attachment Newly added. Used to persist attachments for CDA documents.\n   Attribute Description     id serial id (PK)   doc_id foreign key to corresponding id in table cdx_provenane   attachment_type type of attachment   content payload of attachment   reference name of attachment (if available)    cdx_clinics Newly added. Used to persist information about CDX enabled clinics.\n   Attribute Description     id serial id (PK)   clinicId CDX id for clinic   clinicName name of clinic   clinicAddress address of clinic    cdx_ClinicAndProfessionalIds Newly added. Represents N:N relationship between CDX enabled specialists and the clinics they work for.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/import/",
	"title": "Import",
	"tags": [],
	"description": "",
	"content": "The automatic import of CDX documents is handled by an \u0026lsquo;OSCAR job\u0026rsquo; (see class CDXDownloadJob). The download job is configured using class CDXConfiguration. The UI for the CDX configuration is implemented as a Java Server Page cdxAdmin, which invokes a Struts-action CDXAdminAction.\nThe actual import algorithm is implemented in class CDXImport. CDXDownloadJob calls its importNewDocs method.\nclassDiagram OscarRunnable \u0026lt;|-- CDXDownloadJob CDXConfiguration --\u0026gt; CDXDownloadJob : \u0026lt;\u0026lt;create\u0026gt;\u0026gt; CDXConfiguration : savePolling() CDXAdminAction --\u0026gt; CDXConfiguration : savePolling(enabled, interval) CDXAdminAction : execute() cdxAdmin --\u0026gt; CDXAdminAction : struts-config.xml cdxAdmin : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; CDXDownloadJob : run() CDXDownloadJob --\u0026gt; CDXImport : importNewDocs() CDXImport : importNewDocs() CDXImport : importDocs() cdxImportNewDocs --\u0026gt; CDXImport : importNewDocs() cdxImportNewDocs : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; cdxAdmin --\u0026gt; cdxImportNewDocs : \u0026lt;link\u0026gt; cdxAdmin --\u0026gt; cdxImportOldDocs : \u0026lt;link\u0026gt; cdxImportOldDocs --\u0026gt; CDXImport : importDocs(id-list)  In addition to automatic download, the users can manually trigger the import of new CDX documents. This is implemented with a separate button that loads another JSP (cdxImportNewDocs), which invokes the import function.\nFinally, the UI also supports manual download of selected messages from the CDX infrastructure. This is implemented with a separate button that loads a third JSP (cdxImportOldDocs), which invokes a second import function that takes a list of message IDs (importDocs).\nsequenceDiagram CDXDownloadJob -\u0026gt;\u0026gt; CDXImport : importNewDocs() CDXImport -\u0026gt;\u0026gt; obibcon.ReceiveDoc : pollNewDocIDs() obibcon.ReceiveDoc --\u0026gt;\u0026gt; CDXImport : msg_ids CDXImport -\u0026gt;\u0026gt; CDXImport : importDocuments(msg_ids) loop for each id : msg_ids CDXImport -\u0026gt;\u0026gt; obibcon.ReceiveDoc : retrieveDocument(id) obibcon.ReceiveDoc --\u0026gt;\u0026gt; obibcon.IDocument : new() obibcon.ReceiveDoc --\u0026gt;\u0026gt; CDXImport : doc CDXImport -\u0026gt;\u0026gt; CDXImport : storeDocument(doc, id) CDXImport --\u0026gt;\u0026gt; CdxProvenance : new() CDXImport -\u0026gt;\u0026gt; CdxProvenance : populate(doc) alt previous version CDXImport -\u0026gt;\u0026gt; CDXImport : reviseInboxData(doc) else no previous version CDXImport -\u0026gt;\u0026gt; CDXImport : createInboxData(doc) end Note over CDXImport, Document: If a new version of a document that is already in the inbox is received, the inbox item is revised. CDXImport --\u0026gt;\u0026gt; Document : new() end  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/030_installation/clinic_registration/",
	"title": "Clinic Registration",
	"tags": [],
	"description": "",
	"content": " 1. Generating the Clinic Certificate Generate the Clinic certificate as described in the “CDX Vendor Certificate Process.pdf” document (https://bccdx.ca/Documents/CDX%20Vendor%20Certificate%20Process.pdf)\nIn Key Options select the option Mark keys as exportable.\n After generate the Clinic certificate, export the certificate using the Internet Explorer by selecting the issued certificate and following the Certificate Export Wizard.\nWhen asked, select to export the private key, and select to include all certificates in the certification path if possible.\nThe exported .PFX certificate and password will be utilized by OBIB to communicate with the CDX servers.\n2. Registering the Clinic in OBIB Copy the Clinic certificate (PFX file) to the Vagrant\u0026rsquo;s shared folder.\nLogin into the OBIB\u0026rsquo;s VM via SSH:\n$ vagrant ssh  Go to the Vagrant\u0026rsquo;s shared folder /vagrant:\n$ cd /vagrant/  Execute the register script with the -r option:\n$ ./register.sh Usage: ./register.sh OPTION [VALUE] Options: -r | --register : register a new clinic -u | --unregister : unregister an existent clinic -c | --check : check if a clinic is registered. requires the clinic id as [VALUE] -h | --help : this help information  The register option will create a new directory \u0026lt;clinic_id\u0026gt; with a properties file obibconnector.properties, a keystore obibconnector.keystore, and certificate files (\u0026lt;clinic_id\u0026gt;.crt, \u0026lt;clinic_id\u0026gt;.csr and \u0026lt;clinic_id\u0026gt;.key) for the registered clinic. This folder must be stored in a safe place, moreover the keystore and properties must be copied to the secure directory in the EMR system, which is specified in the mirth_connect.sh.\n$ ./register.sh -r Please, enter the clinic information. notes: - (*) refer to information provided or generated by CDX. - (+) refer to information related to the exported CDX Vendor Certificate. - (!) refer to new information required to generate the OBIB Connector Certificate. - (i) inform the last number of the Oscar Location ID for the new clinic. Clinic ID (*): test_clinic_id Clinic Name (*): Test Clinic Name Clinic Username (*): clinic_username Clinic Password (*): clinicPass CDX Certificate Path (+): /path/to/TestClinicCertificate.pfx CDX Certificate Password (+): TestClinicCertificatePassword New OBIB Certificate Password (!): NewObibCertificatePassword New Clinic Location ID (i): 1 Please, confirm the clinic information. \u0026quot;c\u0026quot; = confirm, \u0026quot;r\u0026quot; = redo, \u0026quot;q\u0026quot; = quit: c Saving clinic information... Verifying clinic registration... Clinic registered. Certificate file found. Generating clinic cetificate for OBIB connector... Generating a 2048 bit RSA private key ....................................................+++ .....+++ writing new private key to './test_clinic_id/test_clinic_id.key' ----- Signature ok subject=C = CA, O = OSP, OU = OBIB, CN = test_clinic_id Getting CA Private Key Certificate was added to keystore The clinic certificate was created and imported into the OBIB keystore. Please, move the generated directory 'test_clinic_id' to a secure place. Customizing obibconnector.properties file... Please, copy 'obibconnector.keystore' and 'obibconnector.properties' to the EMR secure directory '$CATALINA_HOME'. $ ls certs deploy.sh install.sh README.md test_clinic_id configs gen_obib_certs.sh mirth_connect.sh register.sh Vagrantfile $ ls test_clinic_id/ test_clinic_id.crt test_clinic_id.key obibconnector.properties test_clinic_id.csr obibconnector.keystore  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/018_administration/cdx_04/",
	"title": "Manual Document Import",
	"tags": [],
	"description": "",
	"content": " The CDX Admin panel allows administrators to manually download documents from the CDX system.\n The system should normally be configured for *automatic download*. Manual document download should be used only for testing, to recover documents that were inadvertently deleted by users, or to retry failed downloads.  Manual download of “new” documents The CDX document distribution system considers documents as “new”, if and only if they have not yet been downloaded from the CDX system.\nOSCAR EMR should be configured to download “new” documents automatically. Hence, manual download of “new” documents is not needed during normal operations. However, it may be useful for testing purposes.\nThe Admin panel indicates the number of “new” documents waiting for a clinic. They can be downloaded manually using the import button (only visible if “new” documents are available).\nManual download of “old” documents The CDX document distribution system considers documents as “old” if the EMR system has downloaded them already. Still, the CDX system retains downloaded documents for an unspecified time, so that they can be downloaded again.\nWhy import a document that has already been downloaded?\nThis should be necessary only in two types of (exceptional) cases:\n Import Errors. If an error occurred during document import, the document is considered delivered (“old”) from the perspective of the CDX system. However, the document has not successfully been imported by the EMR. Once the problem has been diagnosed and fixed, the admin can use the CDX Admin panel to download the document(s) that could not be imported before (see below). Undo Document Deletion. EMR users have the ability to delete imported documents if they are convinced that the document was delivered in error. The CDX Admin panel allows a user to effectively undo such a manual deletion if it turns out that the document should not have been deleted (see below).  The CDX Admin panel has a table showing those documents available from the CDX system that are not currently imported in the EMR. They can selectively be imported.\nThe figure below shows the CDX Admin panel indicating that there was one unsuccessful download and one document that was deleted. The user selected the unsuccessful download and can press the “*Import selected documents*” button to reattempt the import.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/021_cdxcomposer/cdx_25_history/",
	"title": "History",
	"tags": [],
	"description": "",
	"content": " History CDX Composer keeps track of all the Cdx documents sent through CDX Composer. \u0026gt; CDX Composer → History\n  CDX Composer History   Users can view the detailed sent document by clicking on the \u0026ldquo;View\u0026rdquo; button on the history page.\n  Sent document view    Documents sent through CDX Composer have also been logged and visible in the patient e-chart section as shown in the pic below. Users can view the details of the document by clicking on the \u0026ldquo;View\u0026rdquo; button.   Sent docs in patients e-chart   Distribution Status Users can view the overall status of the document in the column \u0026ldquo;Delivery status\u0026rdquo;. Also, the detailed distribution status of the document(Delivery status for each clinic) can be seen by clicking on the \u0026ldquo;Show Detailed Distribution Status\u0026rdquo; button as shown in the pic above.\nDrafts CDX Composer keeps track of all the Cdx documents drafts saved through CDX Composer. \u0026gt; CDX Composer → drafts\nUsers can anytime edit and sent the saved document by clicking \u0026ldquo;Edit\u0026rdquo; button in front of the specific saved draft as shown in the pic below.   CDX Composer Drafts   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/030_installation/oscar_install/",
	"title": "OSCAR Installation",
	"tags": [],
	"description": "",
	"content": " OBIB Connector Credentials The Clinic Registration process creates two files obibconnector.properties and obibconnector.keystorethat need to be placed in $CATALINA_HOME on the OSCAR server. For example:\n$ sudo cp obibconnector.* $CATALINA_HOME/  Then, change the owner of the files to allow tomcat to read them, and change their permissions to secure them from unauthorized read/write.\n$ chown tomcat7 obibconnector.* $ chmod 400 obibconnector.*  OSCAR UI Properties It is recommended to set the following properties in the oscar.properties file:\n   Property Description     hide_ConReport_link=yes This hides the consultation report menu item to avoid confusion with the CDX e-referrals. This functionality is not used in B.C.   hide_add_specialist_edata=yes This hides the specialist edata UI items to avoid confusion with the BC e-referal solution using CDX   hide_eConsult_link=yes This hides the eConsult link to avoid confusion with the BC e-referal solution using CDX    "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/015_sending/cdx_20/",
	"title": "Sending an e-Referral",
	"tags": [],
	"description": "",
	"content": "E-referrals are created in the usual way (like normal “consultations”) . Of course, it is important to select a CDX-capable specialist as the “Consultant”. These specialists are clearly marked in the dropdown box with a “(CDX)” prefix to their names (see below). They are also at the top of the list of specialists.\nSome providers may work for more than one clinic. In this case, the user can select a specific clinic to direct the referral to. Alternatively, the referral can be sent to all clinics the provider works for.\n   Select a CDX capable recipient   Attachments can be added to the e-Referral (see left side of window). Once the data on the referral has been entered completely, the e-referral can be sent using the Submit and Save CDX e-Referral button (top right or buttom right).\nSending the e-Referral may take a few seconds. If the document was successfully sent to the CDX delivery system, the user will see a success window, which will close automatically after 5 seconds (see below).\n  Success message   Successfully sending a referral document to the CDX system does not imply instant delivery at the target clinic(s). The CDX messaging system will securely hold the sent document until it is downloaded by the recipient EMR system(s). Different EMRs may check the CDX system at different times for new documents to download. OSCAR uses may check the delivery status of sent documents, as explained in the next section.\n If there was an error sending the e-referral using the CDX system, users will see a window with the error message (see below). The error message may help users or their OSPs to resolve the problem and try again. Alternatively, users may choose to send the referral using conventional means (e.g., fax).\n  Sample error message   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/inbox/",
	"title": "Inbox",
	"tags": [],
	"description": "",
	"content": "The queries for the Inbox results are implemented in InboxResultsDao.java. This class has been extended to return CDX documents in the inbox (see method populateDocumentResultsData).\nThe Inbox is displayed by the Java Server Page Page.jsp, which was updated to list CDX documents and launch the CDX document viewing page (showCdxDocument.JSP) for these documents.\nThe showCdxDocument.JSP page has special functions that allow users to route documents to different providers, link documents to patients, create new patient demographic records for new patients, delete documents etc. The display of the actual document content uses an approved XSL transform.\nThere is another JSP that does not provide the above special functions but can only display the document content. This page is called showCdxDocumentArchive.JSP. It is used by showCdxDocument.JSP to display previous or related versions of the same document.\nclassDiagram InboxManager --\u0026gt; InboxResultsDao : populateDocumentResultsData() InboxResultsDao : populateDocumentResultsData() Page --\u0026gt; showCdxDocument : \u0026lt;\u0026lt;link\u0026gt;\u0026gt; Page : \u0026lt;\u0026lt;JSP\u0026gt; showCdxDocument : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; showCdxDocument --\u0026gt; showCdxDocumentArchive : \u0026lt;\u0026lt;link\u0026gt;\u0026gt; showCdxDocument --\u0026gt; cdxCreateDemographic : \u0026lt;\u0026lt;link\u0026gt;\u0026gt; cdxCreateDemographic : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; showCdxDocumentArchive : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; showCdxDocumentArchive --\u0026gt; CDAtoHTML showCdxDocument --\u0026gt; CDAtoHTML CDAtoHTML : \u0026lt;\u0026lt;XSL\u0026gt;\u0026gt; showCdxDocument --\u0026gt; ManageDocumentAction : struts-config.xml showCdxDocumentArchive --\u0026gt; ManageDocumentAction : struts-config.xml ManageDocumentAction : viewCdxAttachment() oscarEncounterIndex --\u0026gt; EctDisplayDocsAction : struts-config.xml oscarEncounterIndex : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; EctDisplayDocsAction --\u0026gt; showCdxDocument : \u0026lt;\u0026lt;link\u0026gt;\u0026gt;  The functionality to view CDX document attachments is implemented in the Struts action class ManageDocumentAction.\nCDX documents are also visible from the patient\u0026rsquo;s main encounter screen (echart). That screen is in oscarEncounter/Index.jsp. The CDX document display action is added to EctDisplayDocsAction.java.\nshowCdxDocument and showCdxDocumentArchive share a blog of duplicated code (i.e., a code clone). Any changes to that code block should be propagated to the other file. Removal of that code clone is a future to-do item.\n "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/echart/",
	"title": "eChart",
	"tags": [],
	"description": "",
	"content": "CDX documents appear in the patient encounter screen (eChart) under \u0026ldquo;Documents\u0026rdquo;. The code to display documents has been modified to use the showCdxDocumentArchive page if the document is from CDX.\nclassDiagram EctDisplayDocsAction --\u0026gt; EDoc : isCDX() EctDisplayDocsAction --\u0026gt; showCdxDocumentArchive : \u0026lt;\u0026lt;link\u0026gt;\u0026gt;  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/021_cdxcomposer/cdx_26_reply/",
	"title": "Receiving and Reply",
	"tags": [],
	"description": "",
	"content": " Receiving Responses received from a specialist (via CDX) will arrive in the receiver\u0026rsquo;s inbox (as described in the receiving chapter)   Inbox   Reply CDX Composer allows user to respond back or reply to the incoming or received documents. \u0026gt; Inbox → Specific Message → Reply\nUsers can open any CDX document from the inbox to see a \u0026ldquo;Reply\u0026rdquo; button in the top right side as shown in the pic below. After clicking on the reply button, user will be directed to the CDX Composer window with some pre-populated fields. Users can add more information in the composer and send the document as a response to the incoming document.   Reply   Users can also view the detailed document to which they are responding by clicking the document type link inside \u0026ldquo;in response to {document type}\u0026rdquo; in the CDX composer as well as in the history page.   Document to which User is responding   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_08/",
	"title": "Associating incoming documents with patients",
	"tags": [],
	"description": "",
	"content": "The CDX import engine attempts to automatically match incoming documents to patient demographic records in the EMR. This is done using 4-point matching as follows:\n - last name - gender - health number - gender  Documents for which the above 4-point match fails are shown as “not assigned” in the Inbox view (see above).\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/015_sending/cdx_21/",
	"title": "Checking the status of a Referral",
	"tags": [],
	"description": "",
	"content": "The user can validate whether an e-referral was sent and delivered by viewing the left side bar of the e-referral. Sent documents are shown with the time and date they were sent to the CDX messaging system.\n  Checkmark shows that document was delivered to recipients   If a document has been sent to the CDX system but it has not been downloaded by the recipient clinic yet, OSCAR will show a cloud symbol instead of a check mark.\n  Checkmark shows that document was delivered to recipients   The user can click on the link to view the document that was sent.\nMoreover, the user can view the information that was sent via CDX by clicking on the link.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/",
	"title": "Receiving",
	"tags": [],
	"description": "",
	"content": " Receiving and Routing OSCAR should be configured for automatic download of CDX documents. The frequency used by OSCAR to check for new documents and download them can be adjusted by administrators in the Administration chapter of this user manual.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/referral/",
	"title": "Referral",
	"tags": [],
	"description": "",
	"content": "The creation of e-Referrals (called \u0026ldquo;consultations\u0026rdquo; in OSCAR) is supported by the Java Server Pages (JSP) page ConsulationFormRequest.JSP. Received CDX documents are shown as possible attachments using the showCdxDocumentArchive JSP.\nThe corresponding actions for sending CDX documents are implemented in EctConsultationRequestFormAction.java. Sent referral documents and received responses can be shown using showCdxDocumentArchive JSP.\nclassDiagram ConsultationFormRequest --\u0026gt; EctConsultationRequestFormAction : struts-config.example ConsultationFormRequest : \u0026lt;\u0026lt;JSP\u0026gt;\u0026gt; ConsultationFormRequest --\u0026gt; showCdxDocumentArchive : \u0026lt;\u0026lt;link\u0026gt;\u0026gt; ConsultationFormRequest --\u0026gt; attachConsultation2 : \u0026lt;\u0026lt;link\u0026gt;\u0026gt; attachConsultation2 --\u0026gt; showCdxDocumentArchive : \u0026lt;\u0026lt;link\u0026gt;\u0026gt; EctConsultationRequestFormAction --\u0026gt; ISubmitDoc EctConsultationRequestFormAction : doCdxSend() ISubmitDoc : newDoc() ISubmitDoc : updateDoc()  CDX documents and their attachments can be attached to consultation requests. (attachConsultation2 has been extended to allow this.)\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/015_sending/cdx_22/",
	"title": "Updating a Referral",
	"tags": [],
	"description": "",
	"content": "The user can send updates of e-referrals simply by re-opening the consultation form, updating some information and pressing on Update \u0026amp; Send CDX e-Referral.\n  Referral form updated with additional information   The consultation form keeps track of all versions of a referral request that have been sent (and delivered).\n  Initial referral and later update   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/obib/",
	"title": "OBIB",
	"tags": [],
	"description": "",
	"content": " The Oscar Bidirectional Interoperability Bus (OBIB) provides a set of services to achieve interoperability between Oscar and CDX. These services are implemented through Mirth Connect channels and a couple of Web Services and RESTful clients. In addition, OBIB is embedeed in a Virtual Machine (VM) defined by Vagrant.\nOBIB VM The OBIB VM is an Ubuntu 18.04 VM build and managed using Vagrant. When deployed, OBIB VM contains all software necessary to execute the OBIB services.\nConfiguration Files and Scripts  Vagrantfile is the Vagrant definition file for the virtual machine and its configurations, such as memory, network type, IP address, forwarded ports, and shared folders.\n mirth_connect.sh contains the configurations needed to install the software within the VM and deploy the OBIB Services.\n install.sh is executed automatically during the VM installation and it is responsible for install and configure all software required by OBIB. When executed the script:\n Update the Operating System - Ubuntu; Install the OpenJDK 8, required by Mirth Connect; Install and configure the Nginx, that works as a reverse proxy and implements SSL/TLS; Install additional XML tools necessary by other scripts; Install and configure the MariaDB Server, utilized by MirthConnect and OBIB; Install and configure the Mirth Connect  deploy.sh is executed as a Vagrant provision and it is responsible for deploy and update OBIB within Mirth Connect. deploy.sh updates the database by running the script ./dbscripts/OBIB_DB_update.sql, updates the Mirth Connect\u0026rsquo;s resources, global scripts, channels and code template libraries, and redeploy all Mirth Connect\u0026rsquo;s channels. See the section OBIB Installation for instruction on how to run deploy.sh.\n  register.sh is an administrative script responsible for the clinics\u0026rsquo; management (register, unregister, and verification). Instructions on how to use register.sh are in the section Clinic Registration of this manual.\n For security reasons, this script should be executed from within the VM.\n  gen_obib_certs.sh is a helper script that generates a self-signed SSL/TLS CA certificate for OBIB. This certificate is utilized to generate the clinics\u0026rsquo; certificates, which are utilized by OBIB Connector to access the OBIB Services. For security reasons, this script should be executed from within the VM.\n   OBIB Service Channels OBIB Services This channel is responsible for:\n Receive JSON messages via a REST API, defined in the \u0026ldquo;HTTP Listener\u0026rdquo; source connector; Route the messages to the appropriate destination connector according to the REST path; Transform the JSON messages to CDA Documents; Send the HL7 messages to the CDX WebServices using the CDX Connector Java Library;  As already mentioned, the source connector of the OBIB Services channel is an HTTP Listener that implements different services. These services are implemented by the Destination Set Filter source connector that routes the messages for the correct destination connector according to the context path of the HTTP request. Moreover, this channel has a couple of JavaScript source connectors to validate the Clinic\u0026rsquo;s credentials and OBIB Connector version. Also, this HTTP Listener implements a custom HTTP authentication using the clinicId and password which are sent in the HTTP request header.\nOBIB Services implements the following services using JavaScript Writer destination connectors.\n Service Submit Document is responsible for creating and submit CDA Documents.\n It receives the messages in OBIB JSON format and converts them to CDX HLX using some JavaScript transformers. The transformed document is sent to CDX using the method WSClientDocument.submitDocument() from the CDXConnector library. The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable. Also, the CDA Document is included in the OBIB response, both in JSON and XML formats after parsed by the CDA Document Parser channel. The metadata from both sent documents and responses from CDX are stored in the OBIB Database by Document Storage channel.  Service List New Documents is responsible for listing/pooling new CDA documents for a specific clinic. It uses the method WSClientDocument.listNewDocuments() from the CDXConnector library.\n The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable.  Service Search Documents is responsible for searching for documents by effective and event period, clinic id or document id. It uses the method WSClientDocument.searchDocuments() from the CDXConnector library.\n The search parameters are mapped via Mapper transformers. The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable.  Service Get Document is responsible for getting a specific document by its id. It uses the method WSClientDocument.getDocument() from the CDXConnector library.\n The query parameter is mapped via a Mapper transformer. The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable.  Service List Clinics is responsible for search/list clinics by clinic id, clinic name, and clinic address. It uses the method WSClientClinic.listClinics() from the CDXConnector library.\n The search parameters are mapped via Mapper transformers. The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable. Moreover, the Clinic Registry is parsed by the CDA Registry Parser channel.  Service List Providers is responsible for search/list providers by clinic id, provider id and provider name. It uses the method WSClientProvider.listProviders() from the CDXConnector library.\n The search parameters are mapped via Mapper transformers. The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable. Moreover, the Provider Registry is parsed by the CDA Registry Parser channel.  Service OSP Support is responsible for process (error) notifications from the OBIB clients using the OSP Support channel.\n A JavaScript transformer encodes the message for the OSP Support channel. A JavaScript response transformer generate a response for the OBIB client.  Service Distribution Status is responsible for searching/requesting the distribution status of a document from CDX. It uses the method WSClientDocument.getDistributionStatus() from the CDXConnector library.\n The search/request parameters are mapped via Mapper transformers. The CDX response is transformed into a JavaScript Response Transformer and is sent back to the OBIB client through the responseMessage variable.   CDA Document Parser This channel is responsible for converting CDA Documents (CDX HL7) to OBIB JSON Documents.\nIts source connector is a Channel Reader and it has only one destination connector, named Parse CDA Document which is a Javascript Writer. Parse CDA Document stores the transformed message (JSON) into the response map, and this message is afterwards returned by the source connector.\nThe messages are transformed by the Parse CDA Document\u0026rsquo;s transformers. Each transformer is responsible for transform a section of the document.\nCDA Registry Parser This channel is responsible for converting the CDX XML registry messages (clinics and providers) into OBIB JSON messages.\nIts source connector is a Channel Reader and it has two destination connectors: Parse Clinic Registry and Parse Provider Registry which are Javascript Writers. Both connectors store the transformed message (JSON) into the response map, and this message is afterwards returned by the source connector.\nTo select which destination connector is responsible for a message, the source connector has two transformers that act as Destination Set Filters that route the messages according to the value of //subject1/assignedEntity/code/@code of the XML.\nParse Clinic Registry transforms the Clinic Registry messages using three transformers. Also, it has a filter to get only messages in which the clinic is able to receive a specific document type (e-Referrals).\nParse Provider Registry transforms the Provider Registry messages using two transformers. It also has a filter to get only messages in which the clinic is able to receive a specific document type (e-Referrals).\nOSP Support This channel is responsible for receive and store (error) messages, and forward them via email.\nIts source connector is a Channel Reader and to handle the messages OSP Support has two chained destination connectors, which are executed in sequence. The channels are:\n Store Error Message is a Database Writer and it is responsible for persisting the message in the OBIB Database.\n Send Notification Email is a SMTP Sender and it is responsible for sending the messages via e-mail for the registered recipients. To test this service, FakeSMTP is being used as a mock SMTP local server. It must be run separately, and the received emails are saved in files locally.\n  Document Storage This channel is responsible for storing the metadata of the documents sent to CDX and the metadata of the CDX responses in the OBIB database.\nIts source connector is a Channel Reader and it has three Database Writer destination connectors to store the different messages\u0026rsquo; metadata: Store CDA Document, Store CDA Response and Store CDA Attachment.\nTo select which destination connector is responsible for a message, the source connector has three transformers that act as Destination Set Filters that route the messages according to the type of the message (tag messageType).\nGlobal Scripts OBIB only utilizes the Deploy global script, that executes once for each deploys or redeploy task. This script loads information from the properties file, and the OBIB Database, and stores this information in the global map to be accessible by the channels.\nCode Templates OBIB has a number of code templates, which are functions that can be used across multiple channels. These code templates are divided into two code template libraries just to organization purpose. The OBIB library contains general use scripts and the CDA library contains scripts to parse, format and build CDA message snippets.\nDevelopment Environment Since OBIB is implemented in Mirth Connect, the easiest way to maintain code is by using the Mirth Connect Administrator. To execute the Mirth Connect Administrator it is necessary download an Administrator Launcher, which is available in the Mirth Connect Launch Page (see figure below), or in the Nextgen\u0026rsquo;s download page.\n  Mirth Connect Launch Page   See the section OBIB Installation for instruction on how to login into Mirth Connect Administrator.\n The easiest way to use Mirth Connect Administrator is download it from the Nextgen\u0026rsquo;s download page and run it by calling the ./launcher script.\n Connectors (Services Clients) CDX Connector CDX Connector is a Java library responsible for connecting to CDX Web Services. Most of the code necessary to communicate with the Web Services is generated from the Web Services definitions using Maven plugins.\nThe following plugins are utilized to automate the WS client code generation:\n Keytool Maven Plugin, import the CDX certificates into a PFX keystore which is utilized to download the WSDL from CDX. WSDLGet Maven Plugin, download the WSDL files from CDX. Apache CXF Maven Plugin, generate java code from WSDL files.  Code structure The classes WSClientDocument.java, WSClientClinic.java, WSClientProvider.java contain the public methods that call the CDX WS methods.\nThe package ca.uvic.leadlab.cdxconnector.messages contains builders and object factories to create WS messages.\nThe folder src/main/resources/wsdl stores the WSDL and XSD files downloaded from CDX, and utilized to generate the WS client code.\nDue to some limitations in the Apache CXF and incompatibilities with the CDX WS definitions, some \u0026ldquo;hacks\u0026rdquo; in the WSDL and XSD files were necessary to generate Java code. All \u0026ldquo;hacks\u0026rdquo; are commented with the tag HACK:.\n Command line WS Client When the CDX Connector jar file is generated, it also generates a jar-test that can be utilized for submitting CDA XML documents via the command line. See the CDX Connector README.md for more details.\nOBIB Connector OBIB Connector is a Java library responsible for connecting to OBIB REST services.\nCode structure  Package facades define fluent interfaces to submit and receive documents, look for registries (clinics and providers), and execute supportive operations in OBIB.\n Package impl implements the interfaces defined in facades.\n Package models define the class structure of the OBIB JSON Document. These classes are utilized to generate the JSON messages sent to the OBIB.\n Package rest implements the client methods for the OBIB REST services. The REST client utilizes the setting in the obibconnector.properties file to communicate with the OBIB.\n  Testing The OBIB Connector tests connect to OBIB using SSL/TLS. Thus, when a new OBIB is deployed in the development environment it is necessary copy the new clinic keystore to the folder /certs in obibconnector and run the maven task \u0026lsquo;package\u0026rsquo;;\n "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/015_sending/cdx_23/",
	"title": "Receiving Responses",
	"tags": [],
	"description": "",
	"content": "Responses received from a specialist (via CDX) will arrive in the receiver\u0026rsquo;s inbox (as described in the receiving chapter)\nHowever, they also show up on the consultation form under \u0026ldquo;Response Received\u0026rdquo; at the side bar.   Indication of a response received   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_09/",
	"title": "Information shown in Inbox view",
	"tags": [],
	"description": "",
	"content": " Similar to other documents and labs, the Inbox shows patient name, number and gender. Result status is not currently shown.  (⚠️ if the CDX document is a lab result, the result status is NOT displayed in the Inbox view. Consequently, the colour is NOT changed to red for an abnormal result.)  The “Date of Test” column shows the Observation Date, followed by the time the document was authored (Authoring Date). The “Order Priority” and “Requesting Client” columns are not currently used for CDX documents. The “Discipline” column identifies the type of CDX document received. The “Report status” column displays the status of the document. The “Ack” column marks the acknowledgement status of a document. -   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/012_chart/",
	"title": "Patient’s eChart",
	"tags": [],
	"description": "",
	"content": " CDX Documents as part of a Patient’s eChart CDX documents appear under “Documents” in the patient’s eChart. For example, the General Lab Report, History \u0026amp; Physical Note, and Consult Note documents in the chart below are CDX documents:\nAs usual, CXDX documents can also be viewed and sorted with the Document Management System:\n  Document Management System   Note: Documents received from a specialist in response to an e-referral request (consultation) can also be viewed by opening the consultation request and viewing the responses (left side bar).\n "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/015_sending/",
	"title": "Bidirectional Workflows: e-Referrals",
	"tags": [],
	"description": "",
	"content": " Bidirectional Workflows: e-Referrals The current OSCAR version supports only one kind of bidirectional workflow, namely e-Referrals. As a primary care EMR, OSCAR currently supports the sending of e-referrals and the receiving of consult notes (responses from specialists).\ngraph LR; A(OSCAR .) --|e-referral .| B(Specialist EMR .) B --|consult note .| A  The term referral is used to align with provincial standard terminology. OSCAR has traditionally used the term consultation. They can be considered synonymous in the following.\n "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_10/",
	"title": "Viewing and Acknowledging CDX Documents",
	"tags": [],
	"description": "",
	"content": "As with other Inbox items, clicking on a CDX Document will open up a viewer window that shows the content of the document, including potential attachments (e.g., PDF documents, images, etc.). The CDX Document Viewer provides the familiar functionality of acknowledging a document, flagging / messaging other providers, etc. (see below).\n  CDX Document Viewer   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/018_administration/",
	"title": "Administration",
	"tags": [],
	"description": "",
	"content": " Administration  The contents of this section is intended for admin users and OSCAR Service Providers.  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_11/",
	"title": "Demographic data consistency warning",
	"tags": [],
	"description": "",
	"content": "Even if the CDX Import Engine was able to positively match the patient named in the document with a demographic record in the EMR (using 4 point matching, see above), the Import Engine may alert the user about inconsistencies between the demographic data in the document and in the EMR (see below).\nThe clinician may use this warning as a motivation to review and possibly update the patient demographic record.\nNote:\nThe update of demographic data is currently not automated.\n "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/021_cdxcomposer/",
	"title": "CDX Composer",
	"tags": [],
	"description": "",
	"content": " CDX Composer The current OSCAR version supports bidirectional workflow for various documents types. As a primary care EMR, OSCAR currently supports the sending and the receiving of Information request, Progress note, and Patient summary (responses from specialists).\ngraph LR; A(OSCAR - CDX Composer.) --|information request, progress note, patient summary| B(Other EMR.)  CDX Composer can be opened by clicking \u0026ldquo;CDX Composer\u0026rdquo; on the top right of the main window as shown in the pic below.   To open CDX Composer   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/024_safetynotificationsystem/",
	"title": "Safety Notification System",
	"tags": [],
	"description": "",
	"content": " The safety notification system provides the user with the real-time status of the OSCAR by displaying the color-coded lights, and the detailed information on the unexpected scenarios and errors in the system related to the CDX and OBIB.\nNotification lights can be seen in the top right corner as shown in the pic below, users can view all notifications by clicking on the light.   To open CDX Composer   Notification types Two types of notifications are generated namely, error and warning.\nError is a type of notification generated by the high-severity failure points of the system which are critical and any failure or exception can lead to the failure of other critical components or functions of the system. For instance when OBIB is not connected to OSCAR.\nWarning is a type of notification generated by the low-severity failure points of the system which are not critical but any failure or exception can lead to the failure of some non-critical component. For instance, automatic polling of CDX documents are disabled.\nNotification lights Green: System is working fine without any error/warning.\nYellow: System is working fine with some warnings which might require some user attention.\nRed: System is not working fine and requires urgent user attention.\nNotification Display All notifications with detailed information can be seen in a new window after clicking on the light on the main page.   Notification display   The notification information page displays the following information about the notifications to the user.\nMessage: specific cause of the failure.\nGenerated at: timestamp of the event.\nGenerated during: a specific function point of failure.\nA user is also provided with functionality to dismiss or ignore any notification with a ’check to ignore’ checkbox. If a user chooses to dismiss any notification then the selected notifications will be removed from the display and time of dismissal, and the name of the user will be logged in the database to keep track of the dismissed notifications.\n "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/",
	"title": "For Users",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_12/",
	"title": "Manually linking documents to existing patient demographics",
	"tags": [],
	"description": "",
	"content": "The CDX Viewer shows a warning if the Import Engine failed to automatically match the document to a patient demographic record using the 4-point matching (last name, DOB, sex, HIN). In this case, the user can manually search the EMR demographic records and link the document to a patient (see “Demographic Search” input and “Link” button below).\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_13/",
	"title": "Creating a new Demographic",
	"tags": [],
	"description": "",
	"content": "If the CDX document refers to a new patient (i.e., a patient that does not have a demographic record in the EMR), the user can create a new Demographic Record based on the information provided in the CDX document (see “New” button”). The CDX Document will be linked automatically to this newly created Demographic record.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_14/",
	"title": "Deleting a CDX Document that was received in error",
	"tags": [],
	"description": "",
	"content": "Finally, the user may delete a CDX document that was received in error, e.g., if the patient named on the document is not (and will not be) a client of the clinic. (see “Delete” button) Note: Documents that were deleted in error can be restored by an Admin (see Administration chapter of this user manual.).\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/030_installation/",
	"title": "For OSPs",
	"tags": [],
	"description": "",
	"content": " Installation  The contents of this section is intended for OSCAR Service Providers.  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_15/",
	"title": "Viewing documents with different versions",
	"tags": [],
	"description": "",
	"content": " It is possible to receive different versions of the same logical document. These documents will appear as separate entries in the Inbox. The CDX Viewer alerts the user that different versions are available and whether the user views the most up-to-date version. The user can switch between different versions.\nExample viewing an outdated version of a document: Viewer indicating that user sees the latest version: "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_16/",
	"title": "Related documents",
	"tags": [],
	"description": "",
	"content": "CDX documents may also be related in ways other than versioning:\n a document may have a “parent document” documents may belong to the same “set of documents” a document may have been sent “in fulfillment of” another document (e.g., a consult not document may have been sent in fulfillment of an referral request document)  Any related CDX documents are displayed at the bottom of the CDX Viewer window:\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/006_for_users/009_receiving/cdx_18/",
	"title": "Document status",
	"tags": [],
	"description": "",
	"content": "CDX documents have a document status (e.g., complete, preliminary, updated, aborted).\nThe status of a document is indicated in the document viewer:\n  Indication of document status in document viewer   Document stati are also displayed in the Inbox list:\n  Indication of document status in Inbox   "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/050_development/",
	"title": "For Developers",
	"tags": [],
	"description": "",
	"content": " Development  The contents of this section is intended for Software Developers.  "
},
{
	"uri": "https://simbioses.github.io/cdxuserman/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " OSCAR CDX Interoperability User Manual Welcome to the OSCAR CDX Interoperability User Manual. This document describes the functionality added to OSCAR for its Version 1 of Clinical Document eXchange (CDX) interoperability. There are of course several places where the existing implementation can be improved. Such improvements will be shipped in future versions of the software.\n"
},
{
	"uri": "https://simbioses.github.io/cdxuserman/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://simbioses.github.io/cdxuserman/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]